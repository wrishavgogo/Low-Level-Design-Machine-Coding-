Design A Function :- 

A good function should have the following properties:

1. Should be small

2. Should do just one thing

3. Should have fewer arguments

Should have fewer arguments
The ideal number of arguments for a function is zero (niladic). Next comes one (monadic), followed closely by two (dyadic). Three arguments (triadic) should be avoided where possible. More than three (polyadic) requires very special justification—and then shouldn’t be used anyway.

- Robert C. Martin (Uncle Bob)


4. Should not have side effects (Imp) 

A function should not promise one thing and do something else as a side effect.

Example: Changing the parameters/class properties in a get/query method.

A set/update (command) function should not ideally update the parameters. They can however update the properties of the class the function belongs to.


Design A Class :- 

1. Organized and Encapsulated

A class should be ordered like this:

a. Start with the variables
   *) public static constants
   *) followed by private static attributes
   *) followed by private instance attributes
b. followed by public functions
c. private utility function just after the public function that calls it.

2. Should be small and should do just one thing

3. Small number of instance variables
