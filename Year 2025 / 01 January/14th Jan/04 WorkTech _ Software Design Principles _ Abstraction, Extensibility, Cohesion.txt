1. Hide Implementation Details

Hiding implementation details helps to make changes in a component without making changes in the other modules/clients using that component. This can be achieved by creating interfaces and using them instead of the concrete 
classes.

2. Separation of Concerns 

Separation of concerns (SoC) is a design principle for separating a computer program into distinct sections such that each section addresses a separate concern.

A program that embodies SoC well is called a modular program. Modularity, and hence separation of concerns, is achieved by creating well-encapsulated classes that have well-defined interfaces.

We should strive to separate the program into separate sections such that the overlap is as minimal as possible. SoC helps maintenance and also code reuse.


3. Maximize Cohesion 

Cohesion is the degree to how strongly related and focused are the various responsibilities of a module. It is a measure of the strength of the relationship between the classâ€™s methods and data themselves. 
We should strive to maximize cohesion. High cohesion results in better understanding, maintaining, and reusing components.

Cohesion is increased if:

a. The functionalities embedded in a class, accessed through its methods, have much in common.
b. Methods carry out a small number of related activities, by avoiding coarsely grained or unrelated sets of data.
c. Related methods are in the same source file or otherwise grouped together; for example, in separate files but in the same sub-directory/folder.


4. Minimize Coupling 

Coupling is the degree to which each module depends on other modules; a measure of how closely connected two modules are. We should strive to minimize coupling.

Coupling is usually contrasted with cohesion. Low coupling often correlates with high cohesion and vice versa.

Tightly coupled modules have the following disadvantages:

a. Change in one module might break another module.
b. Change in one module usually forces a ripple effect of changes in other modules.
c. Reusability decreases as dependency over other modules increases.
d. Assembly of modules might require more effort and/or time.

Coupling can be reduced by:

a. By hiding inner details and interacting through interfaces.
b. Avoid interacting with classes that it can avoid directly dealing with.


5. Command-Query Separation 

Command-Query Separation (CQS) states that every method should either be a command that performs an action, or a query that returns data to the caller, but not both. In other words,
asking a question should not change the answer.

Query: Returns a result without changing the state. Command: Changes the state but does not return any value.

This way the query method could be used anywhere without changing the data/state. We should apply naming conventions (get, set, add, etc.) to imply whether it is a command or a query. 
